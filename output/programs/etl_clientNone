import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class ETLClient {

    public String run(DocumentService service, int maxRequests) {
        // Initialize the document structure
        Map<String, Object> documents = new HashMap<>();
        documents.put("doc-count", 0);
        documents.put("error-count", 0);
        documents.put("docs", new HashMap<String, String[]>());

        for (int i = 0; i < maxRequests; i++) {
            while (true) {
                try {
                    Map<String, Object> event = service.handleRequest();

                    if ("add".equals(event.get("operation"))) {
                        // Handle 'add' operation
                        Map<String, String> document = (Map<String, String>) event.get("document");
                        String docId = document.get("id");
                        String[] docData = removeWords(document.get("data"));

                        // Add new doc_id and data
                        ((Map<String, String[]>) documents.get("docs")).put(docId, docData);

                        // Increment document count
                        documents.put("doc-count", (int) documents.get("doc-count") + 1);
                    }

                    if ("update".equals(event.get("operation"))) {
                        // Handle 'update' operation
                        Map<String, String> document = (Map<String, String>) event.get("document");
                        String docId = document.get("id");
                        String[] docData = removeWords(document.get("data"));

                        // Update doc data by doc id
                        ((Map<String, String[]>) documents.get("docs")).put(docId, docData);
                    }

                    if ("delete".equals(event.get("operation"))) {
                        // Handle 'delete' operation
                        String docId = (String) event.get("document-id");
                        Map<String, String[]> docs = (Map<String, String[]>) documents.get("docs");
                        if (docs.containsKey(docId)) {
                            docs.remove(docId);

                            // Decrement document count
                            documents.put("doc-count", (int) documents.get("doc-count") - 1);
                        }
                    }

                } catch (RetryImmediatelyError e) {
                    // Increment error count on retry error
                    documents.put("error-count", (int) documents.get("error-count") + 1);
                    continue;
                }
                break;
            }
        }

        // Convert the documents map to JSON string
        return new JSONObject(documents).toString();
    }

    private String[] removeWords(String string) {
        // Sanitize string data in documents
        Set<String> removeWords = new HashSet<>();
        removeWords.add("and");
        removeWords.add("or");
        removeWords.add("not");
        removeWords.add("but");
        removeWords.add("to");
        removeWords.add("in");

        String[] words = string.toLowerCase().split(" ");
        return Arrays.stream(words)
                .filter(word -> !removeWords.contains(word))
                .toArray(String[]::new);
    }
}

// Mock classes for DocumentService and RetryImmediatelyError
class DocumentService {
    public Map<String, Object> handleRequest() {
        // Mock implementation
        return new HashMap<>();
    }
}

class RetryImmediatelyError extends Exception {
    // Mock implementation