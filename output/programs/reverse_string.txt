// Can't use built-in reverse methods

public class ReverseString {

    // Method 1: Using a loop to reverse the string
    public static String revStr(String string) {
        // Runtime: O(n)

        String reversedStr = "";
        char[] listStr = string.toCharArray();
        // ['h', 'e', 'l', 'l', 'o']
        for (int i = listStr.length - 1; i >= 0; i--) {
            char letter = listStr[i];
            // l
            reversedStr += letter;
            // oll
        }
        return reversedStr;
    }

    // Method 2: Using StringBuilder to reverse the string
    public static String revStr2(String string) {
        // Runtime: O(n)

        return new StringBuilder(string).reverse().toString();
    }

    // Method 3: Using recursion to reverse the string
    public static String revStr3(String string) {
        // Runtime: O(n)

        if (string.length() == 0) {
            return string;
        }

        return string.charAt(string.length() - 1) + revStr3(string.substring(0, string.length() - 1));
    }

    public static void main(String[] args) {
        // Test cases
        System.out.println(revStr("hello").equals("olleh")); // true
        System.out.println(revStr("1234h").equals("h4321")); // true
        System.out.println(revStr("").equals("")); // true

        System.out.println(revStr2("hello").equals("olleh")); // true
        System.out.println(revStr2("1234h").equals("h4321")); // true
        System.out.println(revStr2("").equals("")); // true

        System.out.println(revStr3("hello").equals("olleh")); // true
        System.out.println(revStr3("1234h").equals("h4321")); // true
        System.out.println(revStr3("").equals("")); // true

        System.out.println("ALL TESTS PASSED!");
    }