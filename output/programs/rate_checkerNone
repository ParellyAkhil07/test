import java.time.LocalTime;
import java.time.Duration;
import java.util.LinkedList;
import java.util.Queue;

public class RateChecker {

    private int actions;
    private int seconds;
    private Queue<LocalTime> times; // Queue to keep track of check times

    // Constructor to initialize actions and seconds
    public RateChecker(int actions, int seconds) {
        this.actions = actions;
        this.seconds = seconds;
        this.times = new LinkedList<>();
    }

    // Method to check if the rate condition is met
    public boolean check() {
        LocalTime currentTime = LocalTime.now(); // Get the current time
        times.add(currentTime); // Add the current time to the queue

        if (times.size() > actions) { // Check if the queue size exceeds the number of actions
            return false; // Return false if the condition is not met
        }

        // Calculate the duration between the current time and the oldest time in the queue
        Duration duration = Duration.between(times.poll(), currentTime);
        return duration.getSeconds() <= seconds; // Return true if the duration is within the allowed seconds
    }

    public static void main(String[] args) {
        RateChecker clicks = new RateChecker(3, 14);
        System.out.println(clicks.check()); // Example usage
        System.out.println(clicks.check());
        System.out.println(clicks.check());
        System.out.println(clicks.check());
    }