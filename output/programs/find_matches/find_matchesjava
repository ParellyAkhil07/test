import java.io.*;
import java.util.*;
import java.util.regex.*;
import java.nio.file.*;

public class FindMatches {
    // Class variables
    private String matchingType;
    private String inputFile;
    private int rownum = 0;
    private String[] header;
    private Integer emailCol2 = null;
    private Integer emailCol = null;
    private Integer phoneCol2 = null;
    private Integer phoneCol = null;
    private Map<String, Integer> ids = new HashMap<>();
    private int id = 1;

    // Constructor
    public FindMatches(String inputFile, String matchingType) throws IOException {
        this.matchingType = matchingType.toLowerCase();
        if (!Arrays.asList("email", "phone", "email_phone").contains(this.matchingType)) {
            System.out.println("Please use a valid matching type: 'email', 'phone', or 'email_phone'.");
            return;
        }

        this.inputFile = inputFile;
        List<String> lines = Files.readAllLines(Paths.get(this.inputFile));
        BufferedReader reader = new BufferedReader(new StringReader(String.join("\n", lines)));

        // Read header
        String line = reader.readLine();
        if (line != null) {
            this.header = line.split(",");
            this.rownum++;
        }

        // Determine email and phone columns
        for (int col = 0; col < this.header.length; col++) {
            if (this.header[col].toLowerCase().contains("email2")) {
                this.emailCol2 = col;
            }
            if (this.header[col].toLowerCase().contains("email1") || this.header[col].toLowerCase().equals("email")) {
                this.emailCol = col;
            }
            if (this.header[col].toLowerCase().contains("phone2")) {
                this.phoneCol2 = col;
            }
            if (this.header[col].toLowerCase().contains("phone1") || this.header[col].toLowerCase().equals("phone")) {
                this.phoneCol = col;
            }
        }

        // Write CSV with IDs
        writeCsv(reader);
    }

    // Email matching logic
    private int emailMatch(String[] row, Integer minId) {
        Integer rowId = null;
        int iden = (minId != null) ? minId : this.id;

        if (this.emailCol2 != null && !row[this.emailCol2].isEmpty()) {
            String email2 = row[this.emailCol2];
            addKeyToDict(email2, iden);
            if (this.ids.containsKey(email2)) {
                rowId = this.ids.get(email2);
            }
        }

        if (this.emailCol != null && !row[this.emailCol].isEmpty()) {
            String email1 = row[this.emailCol];
            addKeyToDict(email1, iden);
            rowId = this.ids.getOrDefault(email1, this.id);
        }

        if (rowId == null) {
            rowId = this.id;
        }

        return rowId;
    }

    // Phone number formatting
    private String formatPhone(String[] row, int column) {
        String formatPhoneCol = row[column].replaceAll("\\D+", "");
        if (formatPhoneCol.length() > 10) {
            formatPhoneCol = formatPhoneCol.substring(1);
        }
        return formatPhoneCol;
    }

    // Phone matching logic
    private int phoneMatch(String[] row, Integer minId) {
        Integer rowId = null;
        int iden = (minId != null) ? minId : this.id;

        if (this.phoneCol2 != null && !row[this.phoneCol2].isEmpty()) {
            String idsKey = formatPhone(row, this.phoneCol2);
            addKeyToDict(idsKey, iden);
            if (this.ids.containsKey(idsKey)) {
                rowId = this.ids.get(idsKey);
            }
        }

        if (this.phoneCol != null && !row[this.phoneCol].isEmpty()) {
            String idsKey = formatPhone(row, this.phoneCol);
            addKeyToDict(idsKey, iden);
            rowId = this.ids.getOrDefault(idsKey, this.id);
        }

        if (rowId == null) {
            rowId = this.id;
        }

        return rowId;
    }

    // Add key to dictionary
    private void addKeyToDict(String idsKey, int iden) {
        this.ids.putIfAbsent(idsKey, iden);
    }

    // Write CSV with IDs
    private void writeCsv(BufferedReader reader) throws IOException {
        BufferedWriter writer = new BufferedWriter(new FileWriter("output_file.csv"));
        writer.write("id," + String.join(",", this.header) + "\n");

        String line;
        while ((line = reader.readLine()) != null) {
            String[] row = line.split(",");
            Integer rowId = null;
            Integer emailRowId = null;
            Integer phoneRowId = null;

            if (this.matchingType.equals("email")) {
                Integer minId = null;
                String email2 = (this.emailCol2 != null) ? row[this.emailCol2] : null;
                String email1 = (this.emailCol != null) ? row[this.emailCol] : null;

                if ((email2 != null && this.ids.containsKey(email2)) || (email1 != null && this.ids.containsKey(email1))) {
                    Integer email2Exists = this.ids.get(email2);
                    Integer emailExists = this.ids.get(email1);
                    List<Integer> idValues = Arrays.asList(email2Exists, emailExists);
                    minId = idValues.stream().filter(Objects::nonNull).min(Integer::compareTo).orElse(null);
                }

                rowId = emailMatch(row, minId);

            } else if (this.matchingType.equals("phone")) {
                Integer minId = null;
                String phone2 = (this.phoneCol2 != null) ? formatPhone(row, this.phoneCol2) : null;
                String phone1 = (this.phoneCol != null) ? formatPhone(row, this.phoneCol) : null;

                if ((phone2 != null && this.ids.containsKey(phone2)) || (phone1 != null && this.ids.containsKey(phone1))) {
                    Integer phone2Exists = this.ids.get(phone2);
                    Integer phoneExists = this.ids.get(phone1);
                    List<Integer> idValues = Arrays.asList(phone2Exists, phoneExists);
                    minId = idValues.stream().filter(Objects::nonNull).min(Integer::compareTo).orElse(null);
                }

                rowId = phoneMatch(row, minId);

            } else if (this.matchingType.equals("email_phone")) {
                Integer minId = null;
                String email2 = (this.emailCol2 != null) ? row[this.emailCol2] : null;
                String email1 = (this.emailCol != null) ? row[this.emailCol] : null;
                String phone2 = (this.phoneCol2 != null) ? formatPhone(row, this.phoneCol2) : null;
                String phone1 = (this.phoneCol != null) ? formatPhone(row, this.phoneCol) : null;

                if ((email2 != null && this.ids.containsKey(email2)) || (email1 != null && this.ids.containsKey(email1)) ||
                    (phone2 != null && this.ids.containsKey(phone2)) || (phone1 != null && this.ids.containsKey(phone1))) {
                    Integer email2Exists = this.ids.get(email2);
                    Integer emailExists = this.ids.get(email1);
                    Integer phone2Exists = this.ids.get(phone2);
                    Integer phoneExists = this.ids.get(phone1);
                    List<Integer> idValues = Arrays.asList(email2Exists, emailExists, phone2Exists, phoneExists);
                    minId = idValues.stream().filter(Objects::nonNull).min(Integer::compareTo).orElse(null);
                    rowId = minId;
                }

                emailRowId = emailMatch(row, minId);
                phoneRowId = phoneMatch(row, minId);

                rowId = (emailRowId < phoneRowId) ? emailRowId : phoneRowId;
            }

            writer.write(rowId + "," + String.join(",", row) + "\n");
            this.id++;
        }

        writer.close();
    }

    // Main method to run the program
    public static void main(String[] args) throws IOException {
        new FindMatches(args[0], args[1]);
    }