
public class StockPrice {

    // Finds the maximum profit for buying and selling stock within a day.
    public static int getMaxProfit(int[] prices) {
        // Initialize max_profit with the first possible profit
        int maxProfit = prices[1] - prices[0];

        // Iterate over each price
        for (int a = 0; a < prices.length; a++) { // O(n)
            for (int b = a + 1; b < prices.length; b++) { // O(n)
                int gainLoss = prices[b] - prices[a];
                if (gainLoss > maxProfit) {
                    maxProfit = gainLoss;
                }
            }
        }
        return maxProfit;
    }

    // Optimized version to find the maximum profit for buying and selling stock within a day.
    public static int getMaxProfitOptimized(int[] prices) {
        // Initialize max_profit with the first possible profit
        int maxProfit = prices[1] - prices[0];
        int low = prices[0];

        // Iterate over each price
        for (int i = 1; i < prices.length; i++) {
            int potentialProfit = prices[i] - low;
            maxProfit = Math.max(maxProfit, potentialProfit);
            low = Math.min(low, prices[i]);
        }
        return maxProfit;
    }

    public static void main(String[] args) {
        // Test cases
        int[] stockPricesYesterday1 = {10, 7, 5, 8, 11, 9};
        int[] stockPricesYesterday2 = {10, 3};
        int[] stockPricesYesterday3 = {1, 10, 7, 14, 2, 11};
        int[] stockPricesYesterday4 = {11, 10, 9, 8, 2, 1};
        int[] stockPricesYesterday5 = {11, 9, 5, 2, 2, 0};
        int[] stockPricesYesterday6 = {1, 1, 1, 1, 1, 1};

        // Run tests
        assert getMaxProfit(stockPricesYesterday1) == 6;
        assert getMaxProfit(stockPricesYesterday2) == -7;
        assert getMaxProfit(stockPricesYesterday3) == 13;
        assert getMaxProfit(stockPricesYesterday4) == -1;
        assert getMaxProfit(stockPricesYesterday5) == 0;
        assert getMaxProfit(stockPricesYesterday6) == 0;

        assert getMaxProfitOptimized(stockPricesYesterday1) == 6;
        assert getMaxProfitOptimized(stockPricesYesterday2) == -7;
        assert getMaxProfitOptimized(stockPricesYesterday3) == 13;
        assert getMaxProfitOptimized(stockPricesYesterday4) == -1;
        assert getMaxProfitOptimized(stockPricesYesterday5) == 0;
        assert getMaxProfitOptimized(stockPricesYesterday6) == 0;

        System.out.println("ALL TESTS PASSED");
    }