class Node {
    int data; // Data stored in the node
    Node next; // Reference to the next node in the list

    // Constructor to initialize the node with data and optional next node
    public Node(int data, Node next) {
        this.data = data;
        this.next = next;
    }

    // Method to represent the data of this node and its successors as a string
    public String asString() {
        StringBuilder out = new StringBuilder();
        Node n = this;

        while (n != null) {
            out.append(n.data);
            n = n.next;
        }

        return out.toString();
    }
}

// Function to reverse a singly linked list
public static Node reverseLinkedList(Node head) {
    Node prev = null; // Previous node, initially null
    Node curr = head; // Current node, starting with the head

    while (curr != null) {
        Node next = curr.next; // Store the next node
        curr.next = prev; // Reverse the link
        prev = curr; // Move prev to current
        curr = next; // Move to the next node
    }

    return prev; // New head of the reversed list
}

// Main method to run tests
public static void main(String[] args) {
    // Test case 1
    Node ll = new Node(1, new Node(2, new Node(3)));
    assert reverseLinkedList(ll).asString().equals("321");

    // Test case 2
    ll = new Node(1, new Node(2, new Node(3)));
    Node newLl = reverseLinkedList(ll);
    assert newLl.asString().equals("321");

    System.out.println("ALL TESTS PASSED!");