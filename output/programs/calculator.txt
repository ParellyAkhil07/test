import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Stack;

public class Calculator {

    // Evaluates the expression without using eval
    public static double evaluate(String expression) {
        expression = expression.replaceAll(" ", "");
        Stack<Integer> parensIndices = new Stack<>();
        StringBuilder storage = new StringBuilder();
        for (int i = 0; i < expression.length(); i++) {
            char charAt = expression.charAt(i);
            if (charAt == '(') {
                parensIndices.push(i);
            } else if (charAt == ')') {
                int start = parensIndices.pop() + 1;
                double total = calculate(expression.substring(start, i));
                storage.setLength(start - 1);
                storage.append(total);
            } else {
                storage.append(charAt);
            }
        }
        return calculate(storage.toString());
    }

    // Calculates the result of a simple expression without parentheses
    private static double calculate(String innerExpression) {
        Stack<Double> numbers = new Stack<>();
        Stack<Character> operations = new Stack<>();
        int i = 0;
        while (i < innerExpression.length()) {
            char charAt = innerExpression.charAt(i);
            if (Character.isDigit(charAt) || charAt == '.') {
                StringBuilder sb = new StringBuilder();
                while (i < innerExpression.length() && (Character.isDigit(innerExpression.charAt(i)) || innerExpression.charAt(i) == '.')) {
                    sb.append(innerExpression.charAt(i++));
                }
                numbers.push(Double.parseDouble(sb.toString()));
                i--;
            } else if (charAt == '+' || charAt == '-' || charAt == '*' || charAt == '/') {
                while (!operations.isEmpty() && precedence(operations.peek()) >= precedence(charAt)) {
                    numbers.push(applyOperation(operations.pop(), numbers.pop(), numbers.pop()));
                }
                operations.push(charAt);
            }
            i++;
        }
        while (!operations.isEmpty()) {
            numbers.push(applyOperation(operations.pop(), numbers.pop(), numbers.pop()));
        }
        return numbers.pop();
    }

    // Determines the precedence of operators
    private static int precedence(char op) {
        switch (op) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
        }
        return -1;
    }

    // Applies the operation to two numbers
    private static double applyOperation(char op, double b, double a) {
        switch (op) {
            case '+':
                return a + b;
            case '-':
                return a - b;
            case '*':
                return a * b;
            case '/':
                if (b == 0) throw new UnsupportedOperationException("Cannot divide by zero");
                return a / b;
        }
        return 0;
    }

    // Unit tests for the evaluate function
    public static class Testing {

        @Test
        public void testNoParens() {
            assertEquals(7.0, evaluate("1 + 3 * 2"));
        }

        @Test
        public void testSingleParens() {
            assertEquals(16.0, evaluate("(1 + 7) * 2"));
        }

        @Test
        public void testOperationsOrder() {
            assertEquals(29.0, evaluate("4 * (1 + 7) - 3"));
        }

        @Test
        public void testLongParens() {
            assertEquals(-6.0, evaluate("(4 - 7 - 1) * 3"));
        }

        @Test
        public void testDecimals() {
            assertEquals(6.25, evaluate("(1.2 + 1.3) * 2.5"));
        }
    }