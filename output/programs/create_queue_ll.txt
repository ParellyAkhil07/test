class Node {
    String data; // Data stored in the node
    Node next;   // Reference to the next node

    // Constructor to initialize the node with data
    public Node(String data) {
        this.data = data;
        this.next = null;
    }
}

// Queue class implemented using a linked list
class Queue {
    private Node head; // Head of the queue
    private Node tail; // Tail of the queue

    // Constructor to initialize an empty queue
    public Queue() {
        this.head = null;
        this.tail = null;
    }

    // Method to get the length of the queue
    public int length() {
        Node curr = head;
        int length = 0;

        while (curr != null) {
            length++;
            curr = curr.next;
        }

        return length;
    }

    // Method to add an item to the end of the queue
    public void enqueue(String item) {
        Node newNode = new Node(item);

        if (head == null && tail == null) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
    }

    // Method to remove and return the item from the front of the queue
    public String dequeue() {
        if (head == null) {
            return null;
        } else {
            String dequeued = head.data;
            head = head.next;
            return dequeued;
        }
    }

    // Method to check if the queue is empty
    public boolean isEmpty() {
        return head == null;
    }

    // Method to return the first item in the queue without removing it
    public String peek() {
        return head != null ? head.data : null;
    }

    // Method to print the items in the queue as a list
    public void printQueue() {
        Node curr = head;
        if (curr == null) {
            System.out.println("[]");
            return;
        }

        StringBuilder queue = new StringBuilder("[");
        while (curr != null) {
            queue.append(curr.data);
            if (curr.next != null) {
                queue.append(", ");
            }
            curr = curr.next;
        }
        queue.append("]");
        System.out.println(queue.toString());
    }

    // Main method to run tests
    public static void main(String[] args) {
        Queue q = new Queue();
        q.enqueue("buy flight");
        q.enqueue("pack");
        q.enqueue("enjoy vacation");
        q.printQueue(); // Output: ['buy flight', 'pack', 'enjoy vacation']
        System.out.println(q.length()); // Output: 3
        System.out.println(q.dequeue()); // Output: 'buy flight'
        q.printQueue(); // Output: ['pack', 'enjoy vacation']
        System.out.println(q.isEmpty()); // Output: false
        System.out.println(q.peek()); // Output: 'pack'
    }