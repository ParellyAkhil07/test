import java.util.*;

class ETLClient {

    public String run(DocumentService service, int maxRequests) {
        // Initialize the result document structure
        Map<String, Object> result = new HashMap<>();
        result.put("doc-count", 0);
        result.put("error-count", 0);
        result.put("docs", new HashMap<String, List<String>>());

        for (int i = 0; i < maxRequests; i++) {
            while (true) {
                try {
                    Map<String, Object> event = service.handleRequest();

                    String operation = (String) event.get("operation");
                    Map<String, Object> docs = (Map<String, Object>) result.get("docs");

                    if ("add".equals(operation)) {
                        // Handle 'add' operation
                        Map<String, String> document = (Map<String, String>) event.get("document");
                        String docId = document.get("id");
                        List<String> docData = removeWords(document.get("data"));

                        docs.put(docId, docData);
                        result.put("doc-count", (int) result.get("doc-count") + 1);

                    } else if ("update".equals(operation)) {
                        // Handle 'update' operation
                        Map<String, String> document = (Map<String, String>) event.get("document");
                        String docId = document.get("id");
                        List<String> docData = removeWords(document.get("data"));

                        docs.put(docId, docData);

                    } else if ("delete".equals(operation)) {
                        // Handle 'delete' operation
                        String docId = (String) event.get("document-id");
                        docs.remove(docId);
                        result.put("doc-count", (int) result.get("doc-count") - 1);
                    }

                } catch (RetryImmediatelyError e) {
                    // Increment error count on retry error
                    result.put("error-count", (int) result.get("error-count") + 1);
                    continue;
                }
                break;
            }
        }

        // Convert result map to JSON string
        return new JSONObject(result).toString();
    }

    private List<String> removeWords(String data) {
        // Remove specified words and convert to lowercase
        Set<String> removeWords = new HashSet<>(Arrays.asList("and", "or", "not", "but", "to", "in"));
        List<String> words = new ArrayList<>(Arrays.asList(data.toLowerCase().split(" ")));

        words.removeIf(removeWords::contains);
        return words;
    }
}

// Mock classes for compilation
class DocumentService {
    public Map<String, Object> handleRequest() {
        return new HashMap<>();
    }
}

class RetryImmediatelyError extends Exception {